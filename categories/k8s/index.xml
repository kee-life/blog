<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>K8s on Personal blog</title><link>https://blog.elmle.cn/categories/k8s/</link><description>Recent content in K8s on Personal blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 20 Feb 2019 14:00:00 +0000</lastBuildDate><atom:link href="https://blog.elmle.cn/categories/k8s/index.xml" rel="self" type="application/rss+xml"/><item><title>prepare a devlopment environment for istio</title><link>https://blog.elmle.cn/posts/prepare-istio-env/</link><pubDate>Wed, 20 Feb 2019 14:00:00 +0000</pubDate><guid>https://blog.elmle.cn/posts/prepare-istio-env/</guid><description>&lt;p>In this post, we will describe the process of preparing a development environment for sofa-mesh &amp;amp; sofa-mosn.&lt;/p>
&lt;h2 id="minikube">
&lt;a href="#minikube">#&lt;/a>
minikube
&lt;/h2>&lt;h3 id="install-minikubehttpsgithubcomkubernetesminikube">
&lt;a href="#install-minikubehttpsgithubcomkubernetesminikube">#&lt;/a>
install &lt;a class="link" href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener"
>minikube&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p &lt;span class="nv">$GOPATH&lt;/span>/src/k8s.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/kubernetes/minikube.git &lt;span class="nv">$GOPATH&lt;/span>/src/k8s.io/minikube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://github.com/kubernetes/minikube/blob/master/docs/contributors/build_guide.md" target="_blank" rel="noopener"
>build guide&lt;/a>&lt;/p>
&lt;h3 id="start-minikube">
&lt;a href="#start-minikube">#&lt;/a>
start minikube
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;span class="lnt">98
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># start-minikube.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copyright (C) 2019 liugang.zlg &amp;lt;liugang.zlg@antfin.com&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># minikube start script&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># check parameter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -ne &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Usage: &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> BUILD_ID&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># constants&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">MINIKUBE_CACHE_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/.minikube/cache
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CURRENT_CONTEXT&lt;/span>&lt;span class="o">=&lt;/span>minikube-&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">WORKING_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/target/&lt;span class="nv">$CURRENT_CONTEXT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CURRENT_DRIVER&lt;/span>&lt;span class="o">=&lt;/span>kvm2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">KUBERNETES_VERSION&lt;/span>&lt;span class="o">=&lt;/span>v1.12.4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REGISTRY_MIRROR&lt;/span>&lt;span class="o">=&lt;/span>https://uzs7j6l5.mirror.aliyuncs.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># setup working dirctory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> setUpDir &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p &lt;span class="nv">$WORKING_DIR&lt;/span>/.kube &lt;span class="nv">$WORKING_DIR&lt;/span>/.minikube/cache/iso
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cp -rf &lt;span class="nv">$MINIKUBE_CACHE_DIR&lt;/span>/&lt;span class="nv">$KUBERNETES_VERSION&lt;/span> &lt;span class="nv">$WORKING_DIR&lt;/span>/.minikube/cache/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># cp $MINIKUBE_CACHE_DIR/iso/minikube-`minikube version|awk &amp;#39;{print $NF}&amp;#39;`.iso $WORKING_DIR/.minikube/cache/iso/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># create minikube&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> setUpMiniKube&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$WORKING_DIR&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">MINIKUBE_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$WORKING_DIR&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># config cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minikube config &lt;span class="nb">set&lt;/span> cache &lt;span class="s1">&amp;#39;istio/proxyv2:1.1.0-snapshot.4,ubuntu:xenial,istionightly/base_debug:latest,prom/prometheus:v2.3.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 启动 minikube&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># --registry-mirror: docker.io 在国内访问困难，我们给 docker daemon 指定一个镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># --kubernetes-version: minikube 支持的 k8s 版本非常丰富，可使用命令 minikube get-k8s-versions 获取所有支持的版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># --profile: 这个参数非常重要，正是它支撑一台宿主机起多个 minikube实例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># --vm-driver: 指定虚拟机 driver&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># --bootstrapper: 官方推荐使用 kubeadm 启动 k8s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minikube start --memory&lt;span class="o">=&lt;/span>&lt;span class="m">8192&lt;/span> --cpus&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span> --disk-size&lt;span class="o">=&lt;/span>30g &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --registry-mirror&lt;span class="o">=&lt;/span>&lt;span class="nv">$REGISTRY_MIRROR&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --kubernetes-version&lt;span class="o">=&lt;/span>&lt;span class="nv">$KUBERNETES_VERSION&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --profile&lt;span class="o">=&lt;/span>&lt;span class="nv">$CURRENT_CONTEXT&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --vm-driver&lt;span class="o">=&lt;/span>&lt;span class="nv">$CURRENT_DRIVER&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --bootstrapper&lt;span class="o">=&lt;/span>kubeadm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --docker-opt &lt;span class="s2">&amp;#34;bip=192.168.4.1/24&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --iso-url &lt;span class="s2">&amp;#34;file://&lt;/span>&lt;span class="nv">$MINIKUBE_CACHE_DIR&lt;/span>&lt;span class="s2">/iso/minikube-`minikube version|awk &amp;#39;{print &lt;/span>&lt;span class="nv">$NF&lt;/span>&lt;span class="s2">}&amp;#39;`.iso&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># --cache-images \&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minikube profile &lt;span class="nv">$CURRENT_CONTEXT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 实践中发现 k8s 集群有时候会设置 master node 不允许调度，我们把污点去除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># kubectl taint nodes --all node-role.kubernetes.io/master-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># print minikube info&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> echoMiniKube&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;minikube ip&amp;#39;&lt;/span>:&lt;span class="sb">`&lt;/span>minikube ip&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;minikube status:&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>minikube status&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;minikube config get profile:&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>minikube config get profile&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;which kubectl:&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>which kubectl&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;kubectl cluster-info:&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>kubectl cluster-info&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># setup minikube environment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> setUpEnv&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cat &amp;gt; &lt;span class="nv">$WORKING_DIR&lt;/span>/minikube-env &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">export MINIKUBE_HOME=&amp;#34;$WORKING_DIR&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">export KUBECONFIG=&amp;#34;$WORKING_DIR/.kube/config&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">eval \$(minikube docker-env)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">source &amp;lt;(kubectl completion bash)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">source&lt;/span> &lt;span class="nv">$WORKING_DIR&lt;/span>/minikube-env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setUpDir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setUpMiniKube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echoMiniKube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setUpEnv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>1..150&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubectl get po &lt;span class="p">&amp;amp;&lt;/span>&amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> -ne &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>talk about kubernetes</title><link>https://blog.elmle.cn/posts/talk-about-kubernetes/</link><pubDate>Fri, 25 Jan 2019 11:00:00 +0000</pubDate><guid>https://blog.elmle.cn/posts/talk-about-kubernetes/</guid><description>&lt;p>Kubernetes 近几年很热门，在各大技术论坛上被炒的很火。它提供了强大的容器编排能力，与此同时 DevOps 的概念也来到大家身边，它模糊了开发和运维之间的边界，让大家更容易的从开发到运维一个大型的分布式系统。
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/63d17911492f6663d6430bb79375924d.png"
width="900"
height="431"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/63d17911492f6663d6430bb79375924d_hu15296541e29d7f08da1453e6875eb4ac_50231_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/63d17911492f6663d6430bb79375924d_hu15296541e29d7f08da1453e6875eb4ac_50231_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="!Center"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="501px"
>
本文会以初学者的视角，希望能让读者更好地理解 Kubernetes 出现的背景、技术架构和设计理念，其中会涉及到部分实现原理。&lt;/p>
&lt;h1 id="背景">
&lt;a href="#%e8%83%8c%e6%99%af">#&lt;/a>
背景
&lt;/h1>&lt;hr>
&lt;h2 id="docker">
&lt;a href="#docker">#&lt;/a>
Docker
&lt;/h2>&lt;p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化，Docker 的实现主要依赖于 Linux 的 namespace、cgroups 和 UnionFS。
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/23276458b2b122fee8d992647b9c9b4a.png"
width="849"
height="199"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/23276458b2b122fee8d992647b9c9b4a_hu178c00c3f75ae27dc77cef4ab533be91_117487_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/23276458b2b122fee8d992647b9c9b4a_hu178c00c3f75ae27dc77cef4ab533be91_117487_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Center"
class="gallery-image"
data-flex-grow="426"
data-flex-basis="1023px"
>
Docker 容器是完全使用沙箱机制，相互之间不会有任何接口。通过 Docker，实现进程、网络、挂载点和文件隔离，更好地利用宿主机资源。Docker 的强大到不需要关心宿主机的依赖，所有的一切都可以在镜像构建时完成，这也是 Docker 目前成为容器技术标准的原因。所以我们能看到在 Kubernetes 中 使用 Docker 作为容器（也支持 rkt）。&lt;/p>
&lt;h2 id="微服务">
&lt;a href="#%e5%be%ae%e6%9c%8d%e5%8a%a1">#&lt;/a>
微服务
&lt;/h2>&lt;p>随着软件的规模越来越大，业务模式越来越复杂，用户量的上升、地区的分布、系统性能的苛刻要求促成服务架构的从单体变成 SOA 再到如今的微服务，未来还可能演变为 Service Mesh ，Serverless等等。
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/47c8f1e1d2b175c2aa1128268d38d80b.png"
width="1324"
height="574"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/47c8f1e1d2b175c2aa1128268d38d80b_hud6a18ecf52706326135bdc1d15e7153b_697987_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/47c8f1e1d2b175c2aa1128268d38d80b_hud6a18ecf52706326135bdc1d15e7153b_697987_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Center"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="553px"
>
如今，一个完整的后端系统不再是单体应用架构了，伴随着多年前的 DDD 概念重新回到大家的视线中。现在的系统被不同的职责和功能被拆成多个服务，服务之间复杂的关系以及单机的单点性能瓶颈让部署和运维变得很复杂，所以部署和运维大型分布式系统的需求急迫待解决。&lt;/p>
&lt;h2 id="kubernetes">
&lt;a href="#kubernetes">#&lt;/a>
Kubernetes
&lt;/h2>&lt;p>铺垫了这么多，终于说到本文的主角了。说 Kubernetes 之前，不得不提 Compose 和 Swarm，其实在 Kubernetes 还未一统江湖之前，这两个已经能实现大部分容器编排的能力了。但是在真正的大型系统上，它们却远远不如 Kubernetes。
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/04ad8d9ae828c06177c17d0cb8e3403e.png"
width="260"
height="170"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/04ad8d9ae828c06177c17d0cb8e3403e_hua1112b74cd954ccad90d06bc52545349_9248_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/04ad8d9ae828c06177c17d0cb8e3403e_hua1112b74cd954ccad90d06bc52545349_9248_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="367px"
>
在容器化和微服务时代，服务越来越多，容器个数也越来越多。Docker 如它 Logo 所示一样，一只只鲸鱼在大海里自由地游荡，而 Kubernetes 就像一个掌舵的船长，带着它们，有序的管理它们，这个过程其实就是容器编排。&lt;/p>
&lt;p>Kubernetes 起源于 Google，很多设计都是源自于 Borg，是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效，并且提供了应用部署，规划，更新，维护的一种机制。&lt;/p>
&lt;h2 id="小结">
&lt;a href="#%e5%b0%8f%e7%bb%93">#&lt;/a>
小结
&lt;/h2>&lt;p>至此，读者了解了 Kubernetes 的前世今生，它的出现使 DevOps 更加火热，普通的开发工程师也能做很多运维操作了。&lt;/p>
&lt;h1 id="设计理念">
&lt;a href="#%e8%ae%be%e8%ae%a1%e7%90%86%e5%bf%b5">#&lt;/a>
设计理念
&lt;/h1>&lt;p>这一部分，我们会围绕 Kubernetes 的四个设计理念看看这些做法能给我们带来什么。&lt;/p>
&lt;h2 id="申明式vs命令式">
&lt;a href="#%e7%94%b3%e6%98%8e%e5%bc%8fvs%e5%91%bd%e4%bb%a4%e5%bc%8f">#&lt;/a>
申明式VS命令式
&lt;/h2>&lt;p>声明式和命令式是截然不同的两种编程方式，在命令式 API 中，我们可以直接发出服务器要执行的命令，例如： “运行容器”、“停止容器”等；在声明式 API 中，我们声明系统要执行的操作，系统将不断向该状态驱动。&lt;/p>
&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/54a06e23d807ee8002e1f7d8eb2dedd3.png"
width="540"
height="291"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/54a06e23d807ee8002e1f7d8eb2dedd3_hu0f7ca2b1c8f0749e6585b9aa827672c9_29972_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/54a06e23d807ee8002e1f7d8eb2dedd3_hu0f7ca2b1c8f0749e6585b9aa827672c9_29972_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>
我们常用的 SQL 就是一种声明式语言，告诉数据库想要的结果集，数据库会帮我们设计获取这个结果集的执行路径，并返回结果集。众所周知，使用 SQL 语言获取数据，要比自行编写处理过程去获取数据容易的多。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Yaml" data-lang="Yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">quay.io/coreos/etcd-operator:v0.2.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MY_POD_NAMESPACE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metadata.namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MY_POD_NAME&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metadata.name&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们来看看相同设计的 YAML，利用它，我们可以告诉 Kubernetes 最终想要的是什么，然后 Kubernetes 会完成目标。&lt;/p>
&lt;p>声明式 API 使系统更加健壮，在分布式系统中，任何组件都可能随时出现故障。当组件恢复时，需要弄清楚要做什么，使用命令式 API 时，处理起来就很棘手。但是使用声明式 API ，组件只需查看 API 服务器的当前状态，即可确定它需要执行的操作。&lt;/p>
&lt;h2 id="显示的api">
&lt;a href="#%e6%98%be%e7%a4%ba%e7%9a%84api">#&lt;/a>
显示的API
&lt;/h2>&lt;p>Kubernetes 是透明的，它没有隐藏的内部 API。换句话说 Kubernetes 系统内部用来交互的 API 和我们用来与 Kubernetes 交互的 API 相同。&lt;/p>
&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/380f507ad6aadd16649f230786054014.png"
width="1638"
height="798"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/380f507ad6aadd16649f230786054014_huac88f75c701d8afa5c064ab178ee8311_130073_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/380f507ad6aadd16649f230786054014_huac88f75c701d8afa5c064ab178ee8311_130073_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="|Center"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="492px"
>
这样做的好处是，当 Kubernetes 默认的组件无法满足我们的需求时，我们可以利用已有的 API 实现我们自定义的特性。&lt;/p>
&lt;h2 id="无侵入性">
&lt;a href="#%e6%97%a0%e4%be%b5%e5%85%a5%e6%80%a7">#&lt;/a>
无侵入性
&lt;/h2>&lt;p>感谢 Docker 容器技术的流行，使得 Kubernetes 为大家提供了无缝的使用方式。在容器化的时代，我们的应用达到镜像后，不需要改动就可以遨游在 Kubernetes 集群中。&lt;/p>
&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/66fd02808d707f959c78782fcd3decf6.png"
width="650"
height="530"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/66fd02808d707f959c78782fcd3decf6_hu03ee812fa474419fb851478b210bf659_97931_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/66fd02808d707f959c78782fcd3decf6_hu03ee812fa474419fb851478b210bf659_97931_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>
Kubernetes 还提供存储 Secret、Configuration 等包含但不局限于密码、证书、容器镜像信息、应用启动参数能力。如此，Kubernetes 以一种友好的方式将这些东西注入 Pod，减少了大家的工作量，而无需重写或者很大幅度改变原有的应用代码。&lt;/p>
&lt;h2 id="有状态的移植">
&lt;a href="#%e6%9c%89%e7%8a%b6%e6%80%81%e7%9a%84%e7%a7%bb%e6%a4%8d">#&lt;/a>
有状态的移植
&lt;/h2>&lt;p>在有状态的存储场景下，Kubernetes 如何做到对于服务和存储的分离呢？假设一个大型分布式系统使用了多家云厂商的存储方案，如何做到开发者无感于底层的存储技术体系，并且做到方便的移植？&lt;/p>
&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/32ca12fa44593a2b5907f1bcc289cfb5.png"
width="859"
height="434"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/32ca12fa44593a2b5907f1bcc289cfb5_hu93ec51a13c3e6005ce18cc641e59b263_37318_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/32ca12fa44593a2b5907f1bcc289cfb5_hu93ec51a13c3e6005ce18cc641e59b263_37318_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="|Center"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="475px"
>
为了实现这一目标，Kubernetes 引入了 PersistentVolumeClaim（PVC）和 PersistentVolume（PV）API 对象。这些对象将存储实现与存储使用分离。&lt;/p>
&lt;p>PersistentVolumeClaim 对象用作用户以与实现无关的方式请求存储的方法，通过它来抹除对底层 PersistentVolume 的差异性。这样就使 Kubernetes 拥有了跨集群的移植能力。&lt;/p>
&lt;h1 id="架构">
&lt;a href="#%e6%9e%b6%e6%9e%84">#&lt;/a>
架构
&lt;/h1>&lt;p>首先要提及的是 Kubernetes 使用很具代表性的 C/S 架构方式，Client 可以使用 kubectl 命令行或者 RESTful 接口与 Kubernetes 集群进行交互。下面这张图是从宏观上看 Kubernetes 的整体架构，每一个 Kubernetes 集群都由 Master 节点 和 很多的 Node 节点组成。
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/d557ade0b967dd60040d459d9c443c05.png"
width="1858"
height="1126"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/d557ade0b967dd60040d459d9c443c05_hu9efe30128b226a9b9b95be70f73f29c0_759222_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/d557ade0b967dd60040d459d9c443c05_hu9efe30128b226a9b9b95be70f73f29c0_759222_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="|Center"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;h2 id="master">
&lt;a href="#master">#&lt;/a>
Master
&lt;/h2>&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/dda50cef366f90eeb2cd09d9ec6c2371.png"
width="1600"
height="1067"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/dda50cef366f90eeb2cd09d9ec6c2371_hu612b5222a5ffa5504ac4f4f64e0cb81b_84266_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/dda50cef366f90eeb2cd09d9ec6c2371_hu612b5222a5ffa5504ac4f4f64e0cb81b_84266_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>
Master 是 Kubernetes 集群的管理节点，负责管理集群，提供集群的资源数据访问入口。拥有 Etcd 存储服务，运行 API Server 进程，Controller Manager 服务进程及 Scheduler 服务进程，关联工作节点 Node。&lt;/p>
&lt;p>Kubernetes API Server 提供 HTTP Rest 接口的关键服务进程，是Kubernetes里所有资源的增、删、改、查等操作的唯一入口。也是集群控制的入口进程；
Kubernetes Controller Manager 是 Kubernetes 所有资源对象的自动化控制中心，它驱使集群向着我们所需要的最终目的状态；
Kubernetes Schedule是 负责 Pod 调度的进程。&lt;/p>
&lt;h2 id="node">
&lt;a href="#node">#&lt;/a>
Node
&lt;/h2>&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/05f3ba08afd94c864c229039b3711248.png"
width="1600"
height="1067"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/05f3ba08afd94c864c229039b3711248_hu612b5222a5ffa5504ac4f4f64e0cb81b_97013_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/05f3ba08afd94c864c229039b3711248_hu612b5222a5ffa5504ac4f4f64e0cb81b_97013_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>
Node 是 Kubernetes 集群架构中运行 Pod 的服务节点。Node 是 Kubernetes 集群操作的单元，用来承载被分配 Pod 的运行，是 Pod 运行的宿主机。关联 Master 管理节点，拥有名称和 IP、系统资源信息。运行 Docker Runtime、kubelet 和 kube-proxy。&lt;/p>
&lt;p>kubelet 负责对Pod对于的容器的创建、启停等任务，发送宿主机当前状态；
kube-proxy 实现 Kubernetes Service 的通信与负载均衡机制的重要组件；
Docker Runtime 负责本机容器的创建和管理工作。&lt;/p>
&lt;h1 id="实现原理">
&lt;a href="#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86">#&lt;/a>
实现原理
&lt;/h1>&lt;p>为了尽可能的让读者能明白 Kubernetes 是如何运作的，这里不会涉及到具体的细节实现，如有读者感兴趣可以自行参阅官网文档。这里以一个简单的应用部署示例来阐述一些概念和原理。&lt;/p>
&lt;h2 id="创建-kubernetes-集群">
&lt;a href="#%e5%88%9b%e5%bb%ba-kubernetes-%e9%9b%86%e7%be%a4">#&lt;/a>
创建 Kubernetes 集群
&lt;/h2>&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/1fc655d24340f8b82234ccdb662f5c9e.png"
width="998"
height="756"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/1fc655d24340f8b82234ccdb662f5c9e_hu00253a23c3444b4652e4ab00db0086a2_161523_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/1fc655d24340f8b82234ccdb662f5c9e_hu00253a23c3444b4652e4ab00db0086a2_161523_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="|Center"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="316px"
>
介绍架构的时候我们知道，Kubernetes 集群由 Master 和 Node 组成。&lt;/p>
&lt;p>Master 管理集群的所有行为例如：应用调度、改变应用的状态，扩缩容，更新/降级应用等。&lt;/p>
&lt;p>Node 可以是是一个虚拟机或者物理机，它是应用的“逻辑主机”，每一个 Node 拥有一个 Kubelet，Kubelet 负责管理 Node 节点与 Master 节点的交互，同时 Node 还需要有容器操作的能力，比如 Docker 或者 rkt。理论上来说，一个 Kubernetes 为了应对生产环境的流量，最少部署3个 Node 节点。&lt;/p>
&lt;p>当我们需要在 Kubernetes 上部署应用时，我们告诉 Master 节点，Master 会调度容器跑在合适的 Node 节点上。&lt;/p>
&lt;p>我们可以使用 Minikube 在本地搭一个单 Node 的 Kubernetes 集群。&lt;/p>
&lt;h2 id="部署应用">
&lt;a href="#%e9%83%a8%e7%bd%b2%e5%ba%94%e7%94%a8">#&lt;/a>
部署应用
&lt;/h2>&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/09ec3314ca193a0bf81f847c81b0c46a.png"
width="1028"
height="764"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/09ec3314ca193a0bf81f847c81b0c46a_hu20b2d548ef3f036c1093203666470f56_178367_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/09ec3314ca193a0bf81f847c81b0c46a_hu20b2d548ef3f036c1093203666470f56_178367_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>
当创建好一个 Kubernetes 集群后，就可以把容器化的应用跑在上面了。我们需要创建一个 Deployment，它会告诉 Kubernetes Master 如何去创建应用，也可以来更新应用。&lt;/p>
&lt;p>当应用实例创建后，Deployment 会不断的观察这些实例，如果 Node 上的 Pod 挂了，Deployment 会自动创建新的实例并且替换它。相比传统脚本运维的方式，这种方式更加优雅。&lt;/p>
&lt;p>我们能通过 kubectl 命令或者 YAML 文件来创建 Deployment，在创建的时候需要指定应用镜像和要跑的实例个数，之后 Kubernetes 会自动帮我们处理。&lt;/p>
&lt;h2 id="查看pods-和-nodes">
&lt;a href="#%e6%9f%a5%e7%9c%8bpods-%e5%92%8c-nodes">#&lt;/a>
查看Pods 和 Nodes
&lt;/h2>&lt;p>下面来介绍下 Pod 和 Node：
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/99a2ea45046cb9f78b065e31e28b7563.png"
width="1268"
height="484"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/99a2ea45046cb9f78b065e31e28b7563_hudf8f88e0419980a4f29157c5d29d5ccc_110057_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/99a2ea45046cb9f78b065e31e28b7563_hudf8f88e0419980a4f29157c5d29d5ccc_110057_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="261"
data-flex-basis="628px"
>
当我们创建好 Deployment 的时候，Kubernetes 会自动创建 Pod 来承载应用实例。Pod 是一个抽象的概念，像一个“逻辑主机”，它代表一组应用容器的集合，这些应用容器共享资源，包括存储，网络和相同的内部集群 IP。&lt;/p>
&lt;p>&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/ef3a0b122575286ed2b6c1a89611b05a.png"
width="1096"
height="932"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/ef3a0b122575286ed2b6c1a89611b05a_hu7365a734c2927fabd7316ebd938e834e_163286_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/ef3a0b122575286ed2b6c1a89611b05a_hu7365a734c2927fabd7316ebd938e834e_163286_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="282px"
>
任何一个 Pod 都需要跑在一个 Node 节点上。Node 是一个“虚拟机器”，它可以是虚拟机也可以是物理机，一个 Node 可以有多个 Pods，Kubernetes 会自动调度 Pod 到合适的 Node 上。&lt;/p>
&lt;h2 id="service-与-labelselector">
&lt;a href="#service-%e4%b8%8e-labelselector">#&lt;/a>
Service 与 LabelSelector
&lt;/h2>&lt;p>Pods 终有一死，也就是说 Pods 也有自己的生命周期，当一个 Pod 挂了的时候，ReplicaSet 会创建新的，并且调度到合适的 Node 节点上。考虑下访问的问题，Pod 替换伴随着 IP 的变化，对于访问者来说，变化的 IP 是合理的；并且当有多个 Pod 节点时，如何 SLB 访问也是个问题，Service 就是为了解决这些问题的。
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/7cd5ab174d094e163a41a5edbab7cd70.png"
width="1176"
height="1076"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/7cd5ab174d094e163a41a5edbab7cd70_huee4c8d5eeb689ad5c70a71ad589f78af_188452_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/7cd5ab174d094e163a41a5edbab7cd70_huee4c8d5eeb689ad5c70a71ad589f78af_188452_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;p>Service 是一个抽象的概念，它定义了一组逻辑 Pods，并且提供访问它们的策略。和其他对象一样，Service 也能通过 kubectl 或者 YAML 创建。Service 定义的 Pod 可以写在 LabelSelector 选项中（下文会介绍），也存在不指定 Pods 的情况，这种比较复杂，感兴趣的读者可以自行查阅资料。&lt;/p>
&lt;p>Service 有以下几种类型：&lt;/p>
&lt;ul>
&lt;li>ClusterIP（默认）：在集群中内部IP上暴露服务，此类型使Service只能从群集中访问；&lt;/li>
&lt;li>NodePort：通过每个 Node 上的 IP 和静态端口（NodePort）暴露服务。NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建。通过请求 :，可以从集群的外部访问一个 NodePort 服务；&lt;/li>
&lt;li>LoadBalancer：使用云提供商的负载均衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务；&lt;/li>
&lt;li>ExternalName：通过返回 CNAME 和它的值，（适用于外部 DNS 的场景）
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/6a96452d6cd2670674bd774d34a5080d.png"
width="1064"
height="1052"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/6a96452d6cd2670674bd774d34a5080d_hubdb7138ea5879e8c979a87cb720c6338_196447_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/6a96452d6cd2670674bd774d34a5080d_hubdb7138ea5879e8c979a87cb720c6338_196447_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="242px"
>&lt;/li>
&lt;/ul>
&lt;p>Labels 和 Selectors 能够让 Kubernetes 拥有逻辑运算的能力，有点像 SQL。举个例子：可以查找 app=hello_word 的所有对象，也可以查找 app in (a,b,c) abc的所有对象。&lt;/p>
&lt;p>Labels是一个绑定在对象上的 K/V 结构，它可以在创建或者之后的时候的定义，在任何时候都可以改变。&lt;/p>
&lt;h2 id="应用扩用">
&lt;a href="#%e5%ba%94%e7%94%a8%e6%89%a9%e7%94%a8">#&lt;/a>
应用扩用
&lt;/h2>&lt;p>前文提到我们可以使用 Deployment 增加实例个数，下图是原始的集群状态：
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/30662524be0c59492d3a20af6e7fa111.png"
width="996"
height="904"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/30662524be0c59492d3a20af6e7fa111_huc3c94e4dc1fa62e1a0a8a92267c682f5_90027_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/30662524be0c59492d3a20af6e7fa111_huc3c94e4dc1fa62e1a0a8a92267c682f5_90027_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>
我们可以随意的更改 replicas （实例个数）来扩容，当我们更改了 Deployment 中的 replicas 值时，Kubernetes 会自动帮我们达到想要的目标实例个数，如下图：
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/37cdf81ebe1663f74fe80567b6c6effc.png"
width="966"
height="882"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/37cdf81ebe1663f74fe80567b6c6effc_hu6502f86c4fa40d28d86ee8c6a3227dc5_118220_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/37cdf81ebe1663f74fe80567b6c6effc_hu6502f86c4fa40d28d86ee8c6a3227dc5_118220_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;h2 id="更新应用">
&lt;a href="#%e6%9b%b4%e6%96%b0%e5%ba%94%e7%94%a8">#&lt;/a>
更新应用
&lt;/h2>&lt;p>更新应用和扩容类似，我们可以更改 Deployment 中的容器镜像，然后 Kubernetes 会帮住我们应用更新（蓝绿、金丝雀等方式），通过此功能，我们还可以实现切换应用环境、回滚、不停机CCD。下面是部署的过程，需要注意的是，我们可以指定新创建的 Pod 最大个数和不可用 Pod 最大个数：
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/2cf23e0bc1253e7c26930310101c12cb.png"
width="914"
height="898"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/2cf23e0bc1253e7c26930310101c12cb_hu2550f108d4584467901510516cf0cd97_117397_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/2cf23e0bc1253e7c26930310101c12cb_hu2550f108d4584467901510516cf0cd97_117397_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/acacffc995f97439c0cb729ad3110758.png"
width="1102"
height="886"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/acacffc995f97439c0cb729ad3110758_hu29876da1df5676850b6f1c08d4cb83db_139408_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/acacffc995f97439c0cb729ad3110758_hu29876da1df5676850b6f1c08d4cb83db_139408_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/caeb3f62ecadfbc9bdf80d5401c8497a.png"
width="1082"
height="900"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/caeb3f62ecadfbc9bdf80d5401c8497a_hu99d48f31215c6291b3469dd0fa6e6e24_131445_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/caeb3f62ecadfbc9bdf80d5401c8497a_hu99d48f31215c6291b3469dd0fa6e6e24_131445_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>
&lt;img src="https://blog.elmle.cn/posts/talk-about-kubernetes/0e994b5fea1d82e79eab0e83f7fb2b4f.png"
width="1126"
height="882"
srcset="https://blog.elmle.cn/posts/talk-about-kubernetes/0e994b5fea1d82e79eab0e83f7fb2b4f_hud5331a53709f90a126c524fde72286f1_131393_480x0_resize_box_3.png 480w, https://blog.elmle.cn/posts/talk-about-kubernetes/0e994b5fea1d82e79eab0e83f7fb2b4f_hud5331a53709f90a126c524fde72286f1_131393_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;h1 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93">#&lt;/a>
总结
&lt;/h1>&lt;p>到了最后，大家对 Kubernetes 能有个大概的了解了，但 Kubernetes 远远不止本文所介绍的这些内容。&lt;/p></description></item><item><title>prepare a minikube environment</title><link>https://blog.elmle.cn/posts/minikube-env-preparatioin/</link><pubDate>Tue, 22 Jan 2019 15:00:00 +0000</pubDate><guid>https://blog.elmle.cn/posts/minikube-env-preparatioin/</guid><description>&lt;p>Prepare a environent with golang, docker-ce, minikube installed. We will begin develop istio in this environment.&lt;/p>
&lt;h3 id="install-go-language">
&lt;a href="#install-go-language">#&lt;/a>
Install go language
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># install older golang, because there must be go command during compile golang source code&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install -y golang
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># get golang source&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p ~/git &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git clone https://github.com/golang/go.git ~/git/go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># compire source code&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/git/go/src&lt;span class="p">;&lt;/span> ./all.bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># remove older golang&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum remove -y golang
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-docker-ce">
&lt;a href="#install-docker-ce">#&lt;/a>
Install Docker-CE
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 1: add aliyun and docker-ce repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum makecache
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 2: install docker-ce (we should set http(s)_proxy because of GFW)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install -y docker-ce
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 3: start docker daemon&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> docker &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo systemctl start docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 4: add current user to docker group&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo usermod -a -G docker &lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> newgrp docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># (Optional) Step 5: test docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-docker-machine">
&lt;a href="#install-docker-machine">#&lt;/a>
Install docker-machine
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">base&lt;/span>&lt;span class="o">=&lt;/span>https://github.com/docker/machine/releases/download/v0.16.1 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -L &lt;span class="nv">$base&lt;/span>/docker-machine-&lt;span class="k">$(&lt;/span>uname -s&lt;span class="k">)&lt;/span>-&lt;span class="k">$(&lt;/span>uname -m&lt;span class="k">)&lt;/span> &amp;gt;/tmp/docker-machine &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo cp /tmp/docker-machine /usr/local/bin/docker-machine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-virtualboxhttpswwwvirtualboxorgwikilinux_downloads">
&lt;a href="#install-virtualboxhttpswwwvirtualboxorgwikilinux_downloads">#&lt;/a>
Install VirtualBox(&lt;a class="link" href="https://www.virtualbox.org/wiki/Linux_Downloads" target="_blank" rel="noopener"
>https://www.virtualbox.org/wiki/Linux_Downloads&lt;/a>)
&lt;/h3>&lt;p>&lt;a class="link" href="https://wiki.centos.org/HowTos/Virtualization/VirtualBox" target="_blank" rel="noopener"
>doc&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 1: download virtualbox&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -Lo VirtualBox-6.0-6.0.2_128162_el7-1.x86_64.rpm https://download.virtualbox.org/virtualbox/6.0.2/VirtualBox-6.0-6.0.2_128162_el7-1.x86_64.rpm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 2: install virtualbox&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install VirtualBox-6.0-6.0.2_128162_el7-1.x86_64.rpm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 3: install vboxdrv kernel module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo /usr/lib/virtualbox/vboxdrv.sh setup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 3: test create a virtual machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-machine create -d virtualbox --virtualbox-disk-size &lt;span class="s2">&amp;#34;100000&amp;#34;&lt;/span> large
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-kvm-driver">
&lt;a href="#install-kvm-driver">#&lt;/a>
Install kvm driver
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS environment &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils libguestfs-tools
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo usermod -a -G libvirt &lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">newgrp libvirt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ubuntu 16.04&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install qemu-kvm libvirt-bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo usermod -a -G libvirtd &lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">newgrp libvirtd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ubuntu 18.04&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install libvirt-clients libvirt-daemon-system qemu-kvm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo usermod -a -G libvirt &lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">newgrp libvirt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># kvm2 driver&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -Lo docker-machine-driver-kvm2 https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x docker-machine-driver-kvm2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo cp docker-machine-driver-kvm2 /usr/local/bin/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm docker-machine-driver-kvm2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># list virtual machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">virsh list --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-minikube">
&lt;a href="#install-minikube">#&lt;/a>
Install minikube
&lt;/h3>&lt;p>We will install minikube in virturebox&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 1: download minikube&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x minikube &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo cp minikube /usr/local/bin/ &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm minikube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 2: download kubectl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/&lt;span class="k">$(&lt;/span>curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;span class="k">)&lt;/span>/bin/linux/amd64/kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo cp kubectl /usr/local/bin/ &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm kubectl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 3: start minikube&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REGISTRY_MIRROR&lt;/span>&lt;span class="o">=&lt;/span>https://docker.mirrors.ustc.edu.cn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">KUBERNETES_VERSION&lt;/span>&lt;span class="o">=&lt;/span>v1.12.4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CURRENT_CONTEXT&lt;/span>&lt;span class="o">=&lt;/span>minikube-&lt;span class="sb">`&lt;/span>date +%s&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CURRENT_DRIVER&lt;/span>&lt;span class="o">=&lt;/span>kvm2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">minikube start --memory&lt;span class="o">=&lt;/span>&lt;span class="m">8192&lt;/span> --cpus&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span> --disk-size&lt;span class="o">=&lt;/span>30g &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --registry-mirror&lt;span class="o">=&lt;/span>&lt;span class="nv">$REGISTRY_MIRROR&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --kubernetes-version&lt;span class="o">=&lt;/span>&lt;span class="nv">$KUBERNETES_VERSION&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --profile&lt;span class="o">=&lt;/span>&lt;span class="nv">$CURRENT_CONTEXT&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --vm-driver&lt;span class="o">=&lt;/span>&lt;span class="nv">$CURRENT_DRIVER&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --bootstrapper&lt;span class="o">=&lt;/span>kubeadm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">minikube profile &lt;span class="nv">$CURRENT_CONTEXT&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>